paths:
  '/Items/{id}/reviews/{fk}':
    get:
      tags:
        - Item
      summary: Find a related item by id for reviews.
      operationId: Item.prototype.__findById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
    delete:
      tags:
        - Item
      summary: Delete a related item by id for reviews.
      operationId: Item.prototype.__destroyById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Item
      summary: Update a related item by id for reviews.
      operationId: Item.prototype.__updateById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/review'
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
  '/Items/{id}/warehouses/{fk}':
    get:
      tags:
        - Item
      summary: Find a related item by id for warehouses.
      operationId: Item.prototype.__findById__warehouses
      parameters:
        - name: fk
          in: path
          description: Foreign key for warehouses
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    delete:
      tags:
        - Item
      summary: Delete a related item by id for warehouses.
      operationId: Item.prototype.__destroyById__warehouses
      parameters:
        - name: fk
          in: path
          description: Foreign key for warehouses
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Item
      summary: Update a related item by id for warehouses.
      operationId: Item.prototype.__updateById__warehouses
      parameters:
        - name: fk
          in: path
          description: Foreign key for warehouses
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/warehouse'
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  '/Items/{id}/reviews':
    get:
      tags:
        - Item
      summary: Queries reviews of Item.
      operationId: Item.prototype.__get__reviews
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/review'
      deprecated: false
    post:
      tags:
        - Item
      summary: Creates a new instance in reviews of this model.
      operationId: Item.prototype.__create__reviews
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/review'
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
    delete:
      tags:
        - Item
      summary: Deletes all reviews of this model.
      operationId: Item.prototype.__delete__reviews
      parameters:
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Items/{id}/reviews/count':
    get:
      tags:
        - Item
      summary: Counts reviews of Item.
      operationId: Item.prototype.__count__reviews
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Items/{id}/warehouses':
    get:
      tags:
        - Item
      summary: Queries warehouses of Item.
      operationId: Item.prototype.__get__warehouses
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/warehouse'
      deprecated: false
    post:
      tags:
        - Item
      summary: Creates a new instance in warehouses of this model.
      operationId: Item.prototype.__create__warehouses
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/warehouse'
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    delete:
      tags:
        - Item
      summary: Deletes all warehouses of this model.
      operationId: Item.prototype.__delete__warehouses
      parameters:
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Items/{id}/warehouses/count':
    get:
      tags:
        - Item
      summary: Counts warehouses of Item.
      operationId: Item.prototype.__count__warehouses
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Items:
    post:
      tags:
        - Item
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Item.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
    patch:
      tags:
        - Item
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Item.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
    put:
      tags:
        - Item
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Item.replaceOrCreate__put_Items
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
    get:
      tags:
        - Item
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Item.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
      deprecated: false
  /Items/replaceOrCreate:
    post:
      tags:
        - Item
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Item.replaceOrCreate__post_Items_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
  /Items/upsertWithWhere:
    post:
      tags:
        - Item
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Item.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
  '/Items/{id}/exists':
    get:
      tags:
        - Item
      summary: Check whether a model instance exists in the data source.
      operationId: 'Item.exists__get_Items_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Items/{id}':
    head:
      tags:
        - Item
      summary: Check whether a model instance exists in the data source.
      operationId: 'Item.exists__head_Items_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Item
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Item.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
    put:
      tags:
        - Item
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Item.replaceById__put_Items_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
    delete:
      tags:
        - Item
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Item.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Item
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Item.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Item'
        - name: id
          in: path
          description: Item id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
  '/Items/{id}/replace':
    post:
      tags:
        - Item
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Item.replaceById__post_Items_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
  /Items/findOne:
    get:
      tags:
        - Item
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Item.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Item'
      deprecated: false
  /Items/update:
    post:
      tags:
        - Item
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Item.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Item'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Items/count:
    get:
      tags:
        - Item
      summary: Count instances of the model matched by where from the data source.
      operationId: Item.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /warehouses:
    post:
      tags:
        - warehouse
      summary: Create a new instance of the model and persist it into the data source.
      operationId: warehouse.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    patch:
      tags:
        - warehouse
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: warehouse.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    put:
      tags:
        - warehouse
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: warehouse.replaceOrCreate__put_warehouses
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    get:
      tags:
        - warehouse
      summary: Find all instances of the model matched by filter from the data source.
      operationId: warehouse.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/warehouse'
      deprecated: false
  /warehouses/replaceOrCreate:
    post:
      tags:
        - warehouse
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: warehouse.replaceOrCreate__post_warehouses_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  /warehouses/upsertWithWhere:
    post:
      tags:
        - warehouse
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: warehouse.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  '/warehouses/{id}/exists':
    get:
      tags:
        - warehouse
      summary: Check whether a model instance exists in the data source.
      operationId: 'warehouse.exists__get_warehouses_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/warehouses/{id}':
    head:
      tags:
        - warehouse
      summary: Check whether a model instance exists in the data source.
      operationId: 'warehouse.exists__head_warehouses_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - warehouse
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: warehouse.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    put:
      tags:
        - warehouse
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'warehouse.replaceById__put_warehouses_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
    delete:
      tags:
        - warehouse
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: warehouse.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - warehouse
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: warehouse.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/warehouse'
        - name: id
          in: path
          description: warehouse id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  '/warehouses/{id}/replace':
    post:
      tags:
        - warehouse
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'warehouse.replaceById__post_warehouses_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  /warehouses/findOne:
    get:
      tags:
        - warehouse
      summary: Find first instance of the model matched by filter from the data source.
      operationId: warehouse.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/warehouse'
      deprecated: false
  /warehouses/update:
    post:
      tags:
        - warehouse
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: warehouse.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/warehouse'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /warehouses/count:
    get:
      tags:
        - warehouse
      summary: Count instances of the model matched by where from the data source.
      operationId: warehouse.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  review:
    properties:
      date:
        type: string
      reviewer_email:
        type: string
      comment:
        type: string
      rating:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
      itemId:
        type: number
        format: double
    required:
      - rating
    additionalProperties: false
  warehouse:
    properties:
      name:
        type: string
      quantity:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
      itemId:
        type: number
        format: double
    required:
      - name
      - quantity
    additionalProperties: false
  Item:
    properties:
      description:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
      img:
        maxLength: 50
        type: string
      imgAlt:
        maxLength: 50
        type: string
      name:
        maxLength: 30
        type: string
      price:
        type: number
        format: double
      rating:
        type: number
        format: double
    required:
      - description
      - id
      - img
      - name
      - price
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
basePath: /inventory
swagger: '2.0'
info:
  x-ibm-name: inventory
  version: 1.0.1
  title: inventory
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
    op:
      properties:
        runtime-url: >-
          https://apiconnect-47e683e1-1dc0-4476-965b-54ee2fd323a0.martinhelin-test.apic.eu-de.mybluemix.net
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  gateway: datapower-gateway
